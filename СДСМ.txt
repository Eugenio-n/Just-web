4.Делаем STP и RSTP
	
	Чтобы узнать какой коммутатор корневой введем команду:
	-sh spanning-tree vlan 3
	
	Сделаем нужный нам коммутатор корневым:
	-spanning-tree vlan 3 root primary
	
	Чтобы узнать режим работы коммутатора, введем:
	-sh spanning-tree summary
	
	Включим RSTP вместо STP. Для этого введем на всех коммутаторах:
	-spanning-tree mode rapid-pvst
	
	
5.ACL и NAT

ACL
Когда пакет проверяется, то все правила перебираются сверху вниз по порядку. Т.е. сначала проверяется не удовлетворяеn ли пакет первому правилу, потом второму.
Как только дошли до правила, под которое подподает пакет - проверка прекращается независимо от того какие правила будут дальше. Поэтому порядок имеет значение.

Входящий трафик — этот тот, который приходит на интерфейс извне.
Исходящий — тот, который отправляется с интерфейса вовне.

Стандартный список доступа проверяет только адрес отправителя. 
Расширенный- адрес отправителя, адрес получателя, а также порт.

Ограничение трафика на интерефейсе: применить правило можно на
входящем интерефейсе - в этом случае трафик не попадает за интерефейс 
исходящем интерфейсе - тогда он не выйдет с интерефейса

Возвращаемся к нашей схеме. Для начала ограничим доступ на WEB сервер по протоколу HTTP это порт 80.
Разрешить доступ всем по порту TCP 80 (протокол HTTP). Для того устройства, с которого будет производиться управление (у нас же есть админ) нужно открыть telnet и ftp, но ему мы дадим полный доступ. Всем остальным отбой

deny ip any any — то оно всегда будет срабатывать и трафик не будет ходить вообще. 
Any — это специальное слово, которое означает адрес сети и обратную маску 0.0.0.0 0.0.0.0 и означает, что под правило подпадают абсолютно все узлы из любых сетей.
host — оно означает маску 255.255.255.255 — то есть именно один единственный указанный адрес.
 
Заходим на msk-arbat-gw1
Поскольку мы собираемся фильтровать трафик по адресу назначения, нам понадобится расширенный список доступа.
	ip access-list extended Servers-out
	remark WEB
	permit tcp any host 172.16.0.2 eq 80
	
Разрешаем (permit) TCP-трафик от любого узла (any) на хост (host — именно один адрес) 172.16.0.2, адресованный на 80-й порт.
Пробуем повесить этот список доступа на интерфейс gig0/1.3:

	int gig0/1.3
	ip access-group Servers-out out
	
Но  теперь пинга до него не будет. Дело в том, что после всех правил в цисковских ACL в конце дописывается неявное deny ip any any (implicit deny). 
Что для нас это означает? Любой пакет, выходящий с интерфейса и не отвечающий ни одному правилу из ACL, подпадает под implicit deny и отбрасывается.
То есть хоть пинг, хоть фтп, хоть что угодно здесь уже не пройдёт.

Разрешим вход админу из компа Other1 с адресом 172.16.6.66 на наш WEB сервер
	ip access-list extended Servers-out
	permit tcp host 172.16.6.66 host 172.16.0.2 range 20 ftp
	permit tcp host 172.16.6.66 host 172.16.0.2 eq telnet
	
	
Теперь настроим доступ на файловый сервер для всех, кто имеет адрес из сети 172.16.0.0/16
	ip access-list extended Servers-out
	permit tcp 172.16.0.0 0.0.255.255 host 172.16.0.3 eq 445
	permit tcp any host 172.16.0.3 range 20 21

Теперь с общими папками. В большинстве современных систем уже используется для этого протокол SMB, которому нужен порт TCP 445.
Договорившись с нашим админом, настроим 445 порт (правда проверить в рамках РТ, конечно, не получится). Но кроме этого, нам понадобятся
порты для FTP — 20, 21, причём не только для внутренних хостов, но и для соединений из интернета.	
	

Настроим почтовый сервер 
	ip access-list extended Servers-out
	permit tcp any host 172.16.0.4 eq pop3
	permit tcp any host 172.16.0.4 eq smtp
	
	
	
	
И закончим все настройкой DNS сервера
	ip access-list extended Servers-out
	remark DNS
	permit udp 172.16.0.0 0.0.255.255 host 172.16.0.5 eq domain

Примеры
	ip access-list extended Servers-out
	permit tcp host 172.16.6.66 host 172.16.0.2 range 20 ftp
	
	ip access-list extended Management-out
	permit ip host 172.16.6.66 172.16.1.0 0.0.0.255
	
	ip access-list extended nat-inet
	permit ip host 172.16.6.66 any
	
NAT
Эта технология, которая преобразует серые ip адреса в белые, позволяя пользователям выходить в интернет.
NAT бывает:
	Статический: один внутренний адрес преобразуется в один внешний
		Настраивается следующей командой:
		ip nat inside source static 172.16.6.5 198.51.100.2
	
	Динамический: у нас есть пул белых адресов, каждый из которых присваивается локальному пользователю в рандомном порядке.
		Настраивается он так:
		ip nat pool lol_pool 198.51.100.3 198.51.100.14 

		Задали пул (диапазон) публичных адресов, из которого будет выбираться адрес для натирования
		access-list 100 permit ip 172.16.6.0 0.0.0.255 any

		Задаём список доступа, который пропускает все пакеты с адресом источника 172.16.6.х, где х варьируется 0-255.
		ip nat inside source list 100 pool lol_pool
		
	Перегруженный: один белый адрес присваивается группе локальных пользователей
		Настройка отличается совершенно незначительно: добавочным словом overload:
		access-list 101 permit 172.16.4.0 0.0.0.255
		ip nat inside source list 101 interface fa0/1 overload


		При этом, разумеется, сохраняется возможность настроить пул адресов:
		ip nat pool lol_pool 198.51.100.2 198.51.100.14 
		access-list 100 permit 172.16.6.0 0.0.0.255
		ip nat inside source list 100 pool lol_pool overload
		
Перенаправление портов
Это нужно чтобы "впустить" кого-то внутрь нашей сети, например, к WEB-серверу.

Вы можете указать, что все запросы, приходящие на конкретный белый адрес и конкретный порт маршрутизатора, должны быть перенаправлены на нужный порт нужного внутреннего адреса.
	ip nat inside source static tcp 172.16.0.2 80 198.51.100.2 80 extendable

Применение данной команды означает, что TCP-запрос, пришедший из интернета на адрес 198.51.100.2 по порту 80, будет перенаправлен на внутренний адрес 172.16.0.2 на тот же 80-й порт. Разумеется, вы можете пробрасывать и UDP и делать перенаправление с одного порта на другой. Это, например, может оказаться полезным, если у вас есть два компьютера, к которым нужен доступ по RDP извне. RDP использует порт 3389. Один и тот же порт вы не можете пробросить на разные хосты (при использовании одного внешнего адреса). Поэтому вы можете сделать так:
	ip nat inside source static tcp 172.16.6.61 3389 198.51.100.2 3389 
	ip nat inside source static tcp 172.16.6.66 3389 198.51.100.2 3398 

Тогда, чтобы попасть на компьютер 172.16.6.61 вы запускаете RDP-сессию на порт 198.51.100.2:3389, а на 172.16.6.66 — 198.51.100.2:3398. Маршрутизатор сам раскидает всё, куда надо.

Плюсы и минусы NAT:

Плюсы:
	экономия ip - адресов
	в какой-то степени файервол
	скрывает от посторонних глаз внутреннюю структуру вашей сети
	
Минусы:
	Некоторые протоколы не могут работать через NAT без костылей
	с одного адреса идёт много запросов на один сервер
	
Приступим к практике. 

Для начала создадим пул белых  ip-адресов:
	ip nat pool main_pool 198.51.100.2 198.51.100.14 netmask 255.255.255.240
	
Собираем ACL:
	ip access-list extended nat-inet

1) Хосты из сети ПТО
Имеют доступ только к профильным сайтам, например, Linkmeup.ru
	msk-arbat-gw1(config-ext-nacl)# permit tcp 172.16.3.0 0.0.0.255 host 192.0.2.2 eq 80
	
2) ФЭО
Даём разрешение только финансовому директору — это только один хост.
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.4.123 any

3) Other
Наши компьютеры с полным доступом
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.6.61 any
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.6.66 any

6) Филиалы в Санкт-Петербурге и Кемерово
Пусть адреса эникиев будут одинаковыми: 172.16.х.222
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.16.222 any
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.17.222 any
	msk-arbat-gw1(config-ext-nacl)# permit ip host 172.16.24.222 any






















	
	
	

  	