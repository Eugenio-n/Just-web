1.Создание vlan
	vlan 2 - name buh - ex - interface fastEthernet 0/1 - switchport mode access
- switchport access vlan 2 - создание влана 2 и добавление к нему интерфейса

2.Создание trunk порта
	interface gig0/1 - switchport mode trunk - switchport trunk vlan 2,3

3.Создание динамического агрегированного канала LACP
	На Multiplayer-Swith0:
		-int range fa0/1-2
		-channel-protocol lacp
		-channel-group 1 mode active
	На Switch1
		-int range fa0/1-2
		-channel-protocol lacp
		-channel-group 1 mode passive

4.Создание статического агрегирования LACP
	На Swith0:
		-int range fa0/1-2
		-channel-group 1 mode on
	На Switch1:
		-int range fa0/1-2
		-channel-group 1 mode on
		
5.Настройка L3 коммутатора, к которому подключены компьютеры
	На Multiplayer-Swith:
		-int fa0/1
		-switchport mode access
		-switchport access vlan 2
		-ex
		-int vlan 2
		-ip address 2.2.2.1 255.255.255.0
		-ex
		-ip routing 
		
6.Настройка L3 коммутатора, к которому подключены L2 коммутаторы,
к которым подключены компьютеры, которые в разных вланах
	На L2 коммутаторах:
	-int fa0/1
	-switchport mode access
	-switchport access vlan 2
	-ex
	-int fa0/2
	-switchport mode access
	-switchport access vlan 3
	-ex
	-int gig0/1
	-switchport mode trunk
	-switchport trunk allowed vlan 2,3

	На L3 коммутаторе:
	-int gig0/1
	-switchport trunk allowed vlan 2,3
	-switchport trunk encapsulation dot1q 
	-ex
	-vlan 2
	-name VLAN2
	-ex
	-int vlan 2
	-ip address 2.2.2.1 255.255.255.0
	-ex
	-vlan 3
	-name VLAN3
	-ex
	-int vlan 3
	-ip address 3.3.3.1 255.255.255.0
	-ip routing
	
7.Настройка маршрутизатора, к которому подключен L2 коммутатор,
к которому подключены компьютеры, расположенные в разных вланах
	На L2 коммутаторе:
	-vlan 2		
	-name VLAN2
	-vlan 3
	-name VLAN3
	-vlan 4
	-name VLAN4
	-ex
	-int fa0/1
	-switchport mode access
	-switchport access vlan 2
	-ex
	-int fa0/2
	-switchport mode access
	-switchport access vlan 3
	-ex
	-int gig0/1
	-switchport mode trunk
	-switchport trunk allowed vlan 2,3
	
	На маршрутизаторе:
	-int gig0/1
	-no shutdown
	 т.к. на маршрутизатор приходит несколько вланов,
	 то нужно создать сабинтерфейсы. каждому из них будет
	 соотетствовать определенный vlan
	-int gig0/1.2
	-enc dot1q 2
	-ip address 192.168.2.1 255.255.255.0
	-no sh
	-int gig0/1.3
	-enc dot1q 3
	-ip address 192.168.3.1 255.255.255.0
	-no sh
	-int gig0/1.4
	-enc dot1q 4
	-ip address 192.168.4.1 255.255.255.0
	-no sh
  
8.Настройка маршрутизатора, к которому подключен L3 коммутатор,
к которому подключены L2 коммутаторы, к которым подключены компьютеры, 
расположенные в разных вланах
	На L2 коммутаторах:
	-на физ порты до конечных устройств вешаем vlan и access режим
	-на физ порт до L3 коммутатора настраиваем trunk порт с vlan
	-ip routing
	
	На L3 коммутаторе:
	-создаем все необходимые vlan
	-заходим на эти вланы как на интерфейс и задаем ip-адреса с маской и no shutdown
	-на физ портах до L2 коммутаторов устанавливаем режим trunk и
	 инкапсулируем в dot1q
	-на порту до маршрутизатора создаем vlan и устанавливаем режим access
	-vlan 5
	-name VLAN5
	-ex
	-int vlan 5
	-ip address 192.168.55.2 255.255.255.0
	-no sh
	-ex
	-int gig0/1
	-sw mo access
	-sw ac vlan 5
	
	На маршрутизаторе:
	-на физ интерфейс вешаем ip-адрес и маску, no shutdown. 
	сабнтерфейсы делать не надо, т.к. нет дополнительных вланов, все идет из L3 коммутатора
	-int gig0/0
	-no sh
	-ip address 192.168.55.1 255.255.255.0
	 
  
  Маршрутизатор не сможет пинговать локальные устройства из-за
  статической маршрутизации.
  
9.Теперь установим соединение маршрутизатора из 8 примера с другими устройствами
	На маршрутизаторе:
	-ip route 192.168.22.0 255.255.255.0 192.168.55.2 (т.е. через ip L3)
	-ip route 192.168.33.0 255.255.255.0 192.168.55.2
	-ip route 192.168.44.0 255.255.255.0 192.168.55.2
	
10.А теперь свяжем 2 сети из 7 и 8 примера. 
	На маршрутизаторе большой сети:
	-int gig0/0
	-no sh
	-ip address 192.168.70.1 255.255.255.252
	
	На маршрутизаторе малой сети:
	-int gig0/0
	-no sh
	-ip address 192.168.70.2 255.255.255.252
	
	А теперь укажем адресные таблицы для маршрутизации:
	В малой сети:
		На маршрутизаторе:
		-ip route 192.168.22.0 255.255.255.0 192.168.70.1 
		-ip route 192.168.33.0 255.255.255.0 192.168.70.1
		-ip route 192.168.44.0 255.255.255.0 192.168.70.1
		
	В большой сети:
		На L3:
		-ip route 192.168.2.0 255.255.255.0 192.168.55.1 (т.е. через порт на маршрутизаторе)
		-ip route 192.168.3.0 255.255.255.0 192.168.55.1
		-ip route 192.168.4.0 255.255.255.0 192.168.55.1
		
		На маршрутизаторе:
		-ip route 192.168.2.0 255.255.255.0 192.168.70.2 (т.е. через порт на втором маршрутизаторе)
		-ip route 192.168.3.0 255.255.255.0 192.168.70.2
		-ip route 192.168.4.0 255.255.255.0 192.168.70.2


11.DHCP-протокол. Динамическая маршрутизация. DHCP-сервер.

Рассмотрим пример из 1 Router, 1 L2, 3 клиента:
	На Router:
	-int gig0/0
	-ip address 192.168.1.1 255.255.255.0
	-ex
	-ip dhcp pool DHCP (название)
	-network 192.168.1.0
	-default-router 192.168.1.1 (нашего маршрутизатора)
	-dns-server 8.8.8.8 (если выходим в инет)
	-ip dhcp excluded-address 192.168.1.1 (исключаем те адреса, которые будем задавать статически)
	
Рассмотрим более сложный пример из 2 сегментов сети (4 клиента в 2 вланах,
1 L2, 1 Router, 1 сервер в своем сегменте):

	На L2:
	-создаем вланы, вешаем их на порты, что в access режимах и создаем 
	-trunk порт до маршрутизатора
	
	На Router:
	-включаем порт, создаем 3 сабинтерфейса, инкапсулируем по влану,
	назначаем каждому ip-адрес и маску
	
	На сервере:
	-Services - DHCP, и создаем пул адресов для каждого из вланов
	
	Теперь осталось переадресовать DHCP-запросы на сервер:
	На Router:
	-заходим на сабинтерфейсы и прописываем каждому следующее:
	-ip helper-address 192.168.4.2 (это ip сервера)
  
 NAT
 Пусть у нас последовательно подключены 3 маршрутизатора, R11 и R22 - абонентские, а R3 представляет собой интернет.
R11:
	gig0/0: 210.210..1.2/30 R3
	gig0/1: 192.168.1.1/24  SW

R22:
	gig0/0: 210.210.2.2/30  R3
	gig0/1: 192.168.2.1/24  SW
	
R33:
	int gig0/1: 210.210.1.1/30 R11
	int gig0/2: 210.210.2.1/30 R22
	
Настройка состоит из следующих этапов:
	Указываем какие порты у нас внешние (outside), а какие внутренние (inside)
	Задаем пул белых ip-адресов
	Создаем расширенный ACL 
	Прописываем правила
	Добавим еще дефолтный маршрут
	И запускам наш NAT, где укажем нашу ACL и пул адресов (можно было указать и интерфейс)
	
R11:
	int gig0/1
	ip nat inside
	int gig0/0
	ip nat outside
	ip nat pool main_pool 210.210.1.2 210.210.1.14 netmask 255.255.255.240
	ip access-list extended nat-inet
	permit ip 192.168.1.0 0.0.0.255 any
	ip route 0.0.0.0 0.0.0.0 210.210.1.1
	ip nat inside source list nat-inet pool main_pool overload
	
R22:
	int gig0/1
	ip nat inside
	int gig0/0
	ip nat outside
	ip nat pool main_pool 210.210.2.2 210.210.2.14 netmask 255.255.255.240
	ip access-list extended nat-inet
	permit ip 192.168.2.0 0.0.0.255 any
	ip route 0.0.0.0 0.0.0.0 210.210.2.1
	ip nat inside source list nat-inet pool main_pool overload
	
 
 
 
 
 OSPF
 Пусть у нас последовательно подключены 3 маршрутизатора в виде треугольника (кольцо), и к каждому из них подключен ПК.
 R1:
	gig0/0: 192.168.1.1/24 PC
	gig0/1: 10.10.10.1/30  R3
	gig0/2: 10.10.11.1/30  R2

R2:	
	gig0/0: 192.168.2.1/24 PC
	gig0/1: 10.10.10.2/30  R1
	gig0/2: 10.10.12.1/30  R3
	
R3:
	gig0/0: 192.168.3.1/24 PC
	gig0/1: 10.10.11.2/30  R3
	gig0/2: 10.10.12.1/30  R2
	
Тогда настройка каждого из них будет следующей:
R1:
	int loopback0 
	ip address 192.168.100.1 255.255.255.255
	router ospf 1
	network 192.168.1.0 0.0.0.255 area 0
	network 10.10.10.0 0.0.0.3 area 0
	network 10.10.11.0 0.0.0.3 area 0
	
R2:
	int loopback0 
	ip address 192.168.100.2 255.255.255.255
	router ospf 1
	network 192.168.2.0 0.0.0.255 area 0
	network 10.10.10.0 0.0.0.3 area 0
	network 10.10.12.0 0.0.0.3 area 0
	
R3:
	int loopback0 
	ip address 192.168.100.3 255.255.255.255
	router ospf 1
	network 192.168.2.0 0.0.0.255 area 0
	network 10.10.11.0 0.0.0.3 area 0
	network 10.10.12.0 0.0.0.3 area 0
	
GRE
Пусть у нас последовательно подключены 3 маршрутизатора. К конечным из них подключен ПК (R1, R2). А средний в роли "интернета" (R3).
И на всех из них настроена маршрутизация. Например, тот же OSPF.

Конфиг:
R1:
	gig0/0:	172.16.0.1/24  PC	
	gig0/1:	192.168.0.1/24 R3
	
R2:
	gig0/0:	172.16.1.1/24  PC	
	gig0/1:	192.168.1.1/24 R3

R3:
	gig0/0:	192.168.0.2	/24  R1	
	gig0/1:	192.168.1.2/24 R2	
	
 Тогда туннель делается следующим образом:
 R1:
	int Tunnel0											-создаем интерфейс Tunnel0
	tunnel source gig0/1								-указываем из какого порта будет прокинут туннель
	tunnel destination 192.168.1.1						-указываем до какого адреса прокидываем туннель
	ip addr 10.0.0.1 255.255.255.0						-ip-адрес нашего маршрутизатора в туннеле
	ip route 172.16.1.0 255.255.255.0 10.0.0.2			-и указываем, чтобы все запросы на сеть 172.16.1.0 отправляли на адрес 10.0.0.2 - ip конечного маршрутизатора

 R2:
	int Tunnel0
	tunnel source gig0/1
	tunnel destination 192.168.0.1
	ip addr 10.0.0.2 255.255.255.0
	ip route 172.16.0.0 255.255.255.0 10.0.0.1
	
	
	
IPSec
Пусть у нас последовательно подключены 3 маршрутизатора, R11 и R22 - абонентские, а R3 представляет собой интернет.
R11:
	gig0/0: 210.210..1.2/30 R3
	gig0/1: 192.168.1.1/24  SW

R22:
	gig0/0: 210.210.2.2/30  R3
	gig0/1: 192.168.2.1/24  SW
	
R33:
	int gig0/1: 210.210.1.1/30 R11
	int gig0/2: 210.210.2.1/30 R22
	
Для начала настроим на них NAT
	
Настройка состоит из следующих этапов:
	Указываем какие порты у нас внешние (outside), а какие внутренние (inside)
	Задаем пул белых ip-адресов
	Создаем расширенный ACL 
	Прописываем правила
	Добавим еще дефолтный маршрут
	И запускаем наш NAT, где укажем нашу ACL и пул адресов (можно было указать и интерфейс)
	
R11:
	int gig0/1
	ip nat inside
	int gig0/0
	ip nat outside
	ip nat pool main_pool 210.210.1.2 210.210.1.14 netmask 255.255.255.240
	ip access-list extended nat-inet
	permit ip 192.168.1.0 0.0.0.255 any
	ip route 0.0.0.0 0.0.0.0 210.210.1.1
	ip nat inside source list nat-inet pool main_pool overload
	
R22:
	int gig0/1
	ip nat inside
	int gig0/0
	ip nat outside
	ip nat pool main_pool 210.210.2.2 210.210.2.14 netmask 255.255.255.240
	ip access-list extended nat-inet
	permit ip 192.168.2.0 0.0.0.255 any
	ip route 0.0.0.0 0.0.0.0 210.210.2.1
	ip nat inside source list nat-inet pool main_pool overload

А теперь приступим к настройке самого IPSec туннеля.

R11
Настройка первой фазы:
	crypto isakmp policy 1  //создаем политику
	encr 3des               //указываем алгоритм шифрования
	hash md5				//укажем алгоритм хеширования
	authentication pre-share//тип аутентификации - прешаред ключ
	group 2					//алгоритм, необходим для обмена прешаред ключами

Настройка ключа аутентификации и пира:
	crypto isakmp key cisco address 210.210.2.2 //указываем сам прешаред ключ и адрес роутера, с которым будем строить VPN подключение

Вторая фаза
crypto ipsec transform-set TS esp-3des esp-md5-hmac	//указываем параметры, необходимые для построения ipsec туннеля

Определяем какой трафик шифровать
	ip access-list extended FOR-VPN
	permit ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255

Создаем криптокарту
	crypto map CMAP 10 ipsec-isakmp
	set peer 210.210.2.2 
	set transform-set TS
	match address FOR-VPN	//указываем какой трафик шифровать

Привязка к интерфейсу 
	interface gig0/0
	crypto map CMAP

Поправим наш NAT:
	ip access-list extended nat-inet
	deny ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255

	
R22

	crypto isakmp policy 1
	encr 3des         
	hash md5	
	authentication pre-share
	group 2
	ex
	crypto isakmp key cisco address 210.210.1.2
	crypto ipsec transform-set TS esp-3des esp-md5-hmac
	ip access-list extended FOR-VPN
	permit ip 192.168.2.0 0.0.0.255 192.168.1.0 0.0.0.255
	crypto map CMAP 10 ipsec-isakmp
	set peer 210.210.2.2 
	set transform-set TS
	match address FOR-VPN 
	ex
	interface gig0/0
	crypto map CMAP
	ex
	ip access-list extended nat-inet
	deny ip 192.168.2.0 0.0.0.255 192.168.1.0 0.0.0.255
	
	
BGP
Пусть наша сеть состоит из 4 AS, каждую из которых будет представлять маршрутизатор (+свитч+пк). Все они соеденины кольцом.
R1
	AS:	64500
	gig0/0:	101.0.0.2/30
	gig0/1:	102.0.0.2/30
	gig0/2.100 100.0.1.1/23
	network: 10.0.0.0/23
	loopback0: 100.0.110.1/32

SW1
	gig0/2: trank 10
	fa0/1:  access 10
	
R2
	AS:	64501
	gig0/0:	   101.0.0.1/30
	gig0/2:	   101.0.0.9/30
	gig0/1.11: 11.0.1.1/20
	network:   11.0.0.0/20
	loopback0: 101.0.120.1/32

SW2
	gig0/1: trank 11
	fa0/1:  access 11
	
R3
	AS:	64503
	gig0/0:	101.0.0.10/30
	gig0/0:	102.0.0.10/30
	network: 13.0.0.0/22
	network: 14.0.0.0/24
	loopback0: 103.0.130.0/32
	
SW3
	gig0/2: trank 13,14
	fa0/1:  access 14
	gig0/1: access 13
	

R4
	AS:	64502
	gig0/0.12: 12.0.1.1/21
	gig0/1:	102.0.0.1/30
	gig0/2:	102.0.0.9/30
	network: 12.0.0.0/21
	loopback0: 102.0.140.1/32

SW4
	gig0/0: trank 12
	fa0/1:  access 12
	


Настройка BGP:

R1
	router bgp 64500
	neighbor 101.0.0.1  remote-as 64501
	neighbor 102.0.0.1  remote-as 64502
	network  10.0.0.0  mask 255.255.254.0

	
R2
	router bgp 64501
	neighbor 101.0.0.2  remote-as 64500
	neighbor 101.0.0.10 remote-as 64503
	network  11.0.0.0  mask 255.255.240.0
	

R3
	router bgp 64503
	neighbor 101.0.0.9  remote-as 64501
	neighbor 102.0.0.9  remote-as 64502
	network  13.0.0.0  mask 255.255.252.0
	network  14.0.1.0  mask 255.255.255.0

R4
	router bgp 64502
	neighbor 102.0.0.10 remote-as 64503
	neighbor 102.0.0.2  remote-as 64500
	network  102.0.0.0  mask 255.255.248.0

AS-Path ACL

Чтобы от соседа получать только интернетовские маршруты и не получать его собственные, то есть его сети, можно воспользоваться правилом сортировки:

	ip as-path access-list 100 deny ^64501$ - запрещаем принимать все маршруты, которые непосредственно зародились в AS 64501
	ip as-path access-list 100 permit .*    - разрешаем все остальное

	router bgp 64500						- заходим в натройки BGP на интересующем роутере
	neighbor 101.0.0.1 filter-list 100 in	- применяем фильтр на неужном соседе.
	
	
Route Map

Укажем, что в подсеть 14.0.1.0/24 предпочтительно ходить через R4_, а в 13.0.0.0/22 через R2_. Для этого воспользуемся атрибутом Local Preference. Чем выше значение этого параметра, тем выше приоритет маршрута.

	ip prefix-list TEST1_IN seq 5 permit 14.0.1.0/24	-создаем префикс лист, выделяем сеть и укажем permit, обозначающее использование Route Map для этого префикс-листа
	ip prefix-list TEST2_IN seq 5 permit 13.0.0.0/22	
	Как и в обычных ACL далее идёт неявное правило deny для всего остального. В данном случае оно означает, что под	действие route-map подпадёт только 14.0.1.0/24 и ничего другого.
	
	route-map BGP1_IN permit 10							-создаем карту, даем название, даем номер, разрешаем прохождение маршрутной информации (permit)
	match ip address prefix-list TEST1_IN				-подпадающей под созданный prefix-list
	set local-preference 50								-для этих анонсов установим local preference в 50 – ниже, чем стандартные 100

	route-map BGP1_IN permit 20							-установим приоритет 100 для остальных маршрутов
	set local-preference 100							

	route-map BGP2_IN permit 10							-аналогично делаем и для второго правила
	match ip address prefix-list TEST2_IN
	set local-preference 50

	route-map BGP2_IN permit 20
	set local-preference 100

	router bgp 64500										
	neighbor 102.0.0.1 route-map BGP2_IN in				-привяжем карту к конкретному BGP-соседу
	neighbor 101.0.0.1 route-map BGP1_IN in

	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  